apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'

// loads variables from a file to `project` so they can be `safeGet`-ed later
File secretPropsFile = file('../secret.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        safeLoad name as String, value
    }
}

Integer getBuildVersion(defaultVersion, Boolean increment = false) {
    File verFile = file('../version.properties')

    if (!verFile.canRead())
        verFile.createNewFile()

    Properties props = new Properties()

    props.load new FileInputStream(verFile)
    String currentCodeVersion = props['VERSION_CODE']

    if (currentCodeVersion == null)
        currentCodeVersion = defaultVersion ?: android.defaultConfig.versionCode

    if (increment) {
        Integer bumpedCodeVersion = currentCodeVersion.toInteger() + 1
        android.defaultConfig.versionCode = bumpedCodeVersion

        props['VERSION_CODE'] = bumpedCodeVersion.toString()

        props.store verFile.newWriter(), "Build version updated with each release build"
        currentCodeVersion = bumpedCodeVersion
    }

    currentCodeVersion as Integer
}

dependencies {
    // Crashlytics Kit
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true
    }

    // Twitter Kit
    compile('com.twitter.sdk.android:twitter:1.11.0@aar') {
        transitive = true
    }

    // Digits Kit
    compile('com.digits.sdk.android:digits:1.9.2@aar') {
        transitive = true
    }

    // MoPub Kit
    compile('com.mopub.sdk.android:mopub:4.0.0@aar') {
        transitive = true
    }
}
android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    signingConfigs {
        release {
            storeFile safeGetFile('STORE_FILE')
            storePassword safeGet('STORE_PASSWORD')
            keyAlias safeGet('KEY_ALIAS')
            keyPassword safeGet('KEY_PASSWORD', safeGet('STORE_PASSWORD'))
        }
    }

    defaultConfig {
        applicationId "ru.egor_d.instarating"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode getBuildVersion(1)
        versionName "0.1"
    }
    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField("String", "client_id", project.client_id)
            buildConfigField("String", "redirect_uri", project.redirect_uri)
        }
        release {
            buildConfigField("String", "client_id", project.client_id)
            buildConfigField("String", "redirect_uri", project.redirect_uri)

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release as Object
            minifyEnabled false
            zipAlignEnabled true

            File releasesDir = new File(
                    safeGet('RELEASES_PARENT_DIR', 'APKs'),
                    safeGet('FOLDER_NAME', project.group as String)
            )

            if (!releasesDir.exists())
                releasesDir.mkdirs()

            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.name == "release") {
                        String fileName = [
                                defaultConfig.applicationId,
                                project.name,
                                defaultConfig.versionName,
                                defaultConfig.versionCode
                        ].join('-')
                        output.outputFile = new File(releasesDir, fileName + '.apk')

//                        if (variant.getBuildType().isMinifyEnabled()) {
//
//                            File mappingDir = new File(releasesDir, 'mappings')
//                            if (!mappingDir.exists())
//                                mappingDir.mkdirs()
//
//                            assemble << {
//                                copy {
//                                    from variant.mappingFile
//                                    into mappingDir
//                                    rename 'mapping.txt', "mapping-${fileName}.txt"
//                                }
//                            }
//                        }
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'io.reactivex:rxjava:1.0.16'
    compile 'com.google.dagger:dagger:2.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'
    compile 'com.squareup.okhttp:logging-interceptor:2.6.0'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'jp.wasabeef:picasso-transformations:1.3.1'
    compile 'jp.wasabeef:recyclerview-animators:2.1.0'
    compile 'me.tatarka:auto-parcel-gson:0.1'
    apt 'me.tatarka:auto-parcel-gson-processor:0.1'

    compile 'com.hannesdorfmann.fragmentargs:annotation:3.0.0'
    apt 'com.hannesdorfmann.fragmentargs:processor:3.0.0'
}

// attach new global property to the `project`. Will not override by default
def safeLoad(String name, Object value, Boolean override = false) {
    if (!hasProperty(name) || override)
        project.set name, value
}

// returns value of requested variable or default (as a fallback)
String safeGet(String name, String defaultValue = '') {
    hasProperty(name) ? project[name] : defaultValue
}
// returns file from a path provided in properties file
File safeGetFile(String name) {
    String fileName = safeGet(name, null)
    fileName != null ? file(fileName) : null
}